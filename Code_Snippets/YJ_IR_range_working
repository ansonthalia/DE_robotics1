#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
I am still working on this code to find a way to
a. constantly check IR distance in the background of pick and place code (make this code a module?)
b. make this code a class()
"""

import rospy
from sensor_msgs.msg import Range
from time import sleep
#callback IR range and wobbles when distance is longer than 10
class DENIRO_IR:
    def __init__(self, side):
        self.brick_present = False
        self.side = side
        
    def check_brick(self):
        if slef.side == 'l':

            # Connect image topic
            ir_topic = "/robot/range/right_hand_range/state"
            print "1"
            self.ir_sub = rospy.Subscriber(ir_topic, Range, self.callback)

            # Allow up to one second to connection
            rospy.sleep(1)
            
        if self.side == 'r':
            self.bridge = CvBridge()
            self.image_received = False

            # Connect image topic
            ir_topic = "/robot/range/right_hand_range/state"
            print "1"
            self.ir_sub = rospy.Subscriber(ir_topic, Range, self.callback)

            # Allow up to one second to connection
            rospy.sleep(1)

    def callback(self, data):
        if data.range >= 0.1:
            self.brick_present = True
        else:
            self.brick_present = False
        print(data.range)  
         
def ir_check(side):
    '''argument can only be l&r'''
    #Initialise node
    rospy.init_node('listener %s'%side, anonymous=False)
    ir_sensor = DENIRO_IR(side)
    
    if ir_sensor.brick_present == True:
        return True
    else:
        return False
    

"""
This part is to find out
"""
#When function is activated and finish
#between pick and place
            else:
                print("\nVertical block row")
                if j % 2:
                    print("\nUsing left")
                    load_UP(n,'l')
                    print("\nPicking...")
                    hocl.pick(lv_pick)
                    print("\nPlacing...")
                    rh_listener()
                    if callback == True:
                        print('Oh darn')
                    print("Returning to start...")
                    hocl.move_to_start(left_start)
                    n+=1
                else:
                    print("\nUsing right")
                    load_UP(n,'r')
                    print("\nPicking...")
                    hocr.pick(rv_pick)
                    print("\nPlacing...")
                    hocr.place(block_poses[i][j])
                    print("Returning to start...")
                    hocr.move_to_start(right_start)
                    n+=1
                j += 1
            i += 1
            #else: 
               # print('What a fail')
        return

#When to use rh and lh

